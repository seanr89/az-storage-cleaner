import 'dotenv/config';
import { BlobServiceClient } from '@azure/storage-blob';
import * as fs from 'fs/promises';
import * as path from 'path';
import { removeAzFilesFromContainer } from './remover';

/**
 * Reads the list of files to be deleted from the output file generated by the az-reader.
 * @param filePath The path to the file containing the list of files.
 * @returns An array of filenames.
 */
async function getFilesToDelete(filePath: string): Promise<string[]> {
    try {
        console.log(`\nüìÑ Reading files to delete from: ${filePath}`);
        const content = await fs.readFile(filePath, 'utf-8');
        const lines = content.split('\n');
        const files: string[] = [];

        // Example line: "- main.0c00150a9fdeef81.js (Last Modified: ...)"
        const fileRegex = /^- ([\w.-]+) \(Last Modified:/;

        for (const line of lines) {
            const match = line.match(fileRegex);
            if (match && match[1]) {
                files.push(match[1]);
            }
        }

        console.log(`Found ${files.length} files to delete.`);
        return files;
    } catch (error: any) {
        if (error.code === 'ENOENT') {
            console.error(`\n‚ùå Error: Input file not found at '${filePath}'.`);
            console.error('Please run the az-reader project first to generate the list of files to delete.');
        } else {
            console.error('\n‚ùå An unexpected error occurred while reading the file list:');
            console.error(error);
        }
        return [];
    }
}


/**
 * Main function to orchestrate the file removal process.
 */
async function main() {
    console.log('üöÄ Starting Azure Storage cleanup process...');

    const connectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;
    let containerName = process.env.AZURE_STORAGE_CONTAINER_NAME;

    if (!connectionString) {
        console.error('‚ùå Error: AZURE_STORAGE_CONNECTION_STRING is not set in your .env file.');
        return;
    }
    if (!containerName) {
        console.error('‚ùå Error: AZURE_STORAGE_CONTAINER_NAME is not set in your .env file.');
        return;
    }

    // Handle special container names like '$web'
    if (containerName === "web") {
        containerName = "$web";
    }

    const inputFilePath = path.join(__dirname, '../../az-reader/output/earliest_totals.txt');
    const filesToDelete = await getFilesToDelete(inputFilePath);

    if (filesToDelete.length === 0) {
        console.log('\nü§∑ No files to delete. Exiting.');
        return;
    }

    try {
        console.log(`\nüì¶ Connecting to Azure Storage account to delete files from container: '${containerName}'...`);
        const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);

        await removeAzFilesFromContainer(containerName, filesToDelete, blobServiceClient);

        console.log(`\n‚úÖ Successfully processed ${filesToDelete.length} files for deletion.`);

    } catch (error) {
        console.error('\n‚ùå An unexpected error occurred during the deletion process:');
        if (error instanceof Error) {
            console.error(`Error message: ${error.message}`);
        } else {
            console.error(error);
        }
    }

    console.log('\nüéâ Application finished!');
}

// Call the main function to start the process
main();